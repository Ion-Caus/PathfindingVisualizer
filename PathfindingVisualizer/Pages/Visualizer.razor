@page "/"
@page "/visualizer"
@using PathfindingVisualizer.Models
@using PathfindingVisualizer.Algorithms

@inject IJSRuntime JsRuntime

<PageTitle>Visualizer</PageTitle>

<div class="d-flex flex-column gap-4 justify-center @(_isRunning ? "cursor-wait" : string.Empty)">
    @if (NodeStates.Any())
    {
        <MudPaper Class="d-flex flex-row flex-wrap justify-center gap-4 pa-2" Elevation="0">
            @foreach (var (state, name) in NodeStates)
            {
                <div class="d-flex flex-row align-content-center gap-2">
                    <div class="node-state" style="@NodeStyleFunc(state)"></div>
                    <MudText Typo="Typo.button">@name</MudText>
                </div>

            }
        </MudPaper>
    }

    @if (_grid is not null)
    {
        <MudPaper Class="d-flex flex-column pa-2 disable-selection" Style="-webkit-user-select: none; user-select: none;">
            @foreach (var row in _grid.Rows)
            {
                <div class="d-flex flex-row justify-center">
                    @foreach (var node in row)
                    {
                        @* TODO: Add EventUtil.AsNonRenderingEventHandler<MouseEventArgs>  *@
                        <div class="node d-flex flex-column" style="@NodeStyleFunc(node.State)"
                             @onmousedown="() => OnMouseDown(node)"
                             @onmouseenter="() => OnMouseEnter(node)"
                             @onmouseup="OnMouseUp">
                            
                            @if (_debugMode)
                            {
                                <p style="font-size: xx-small; color: red;">@node.CostDistance</p>
                                <p style="font-size: xx-small; color: green;">@node.DistanceToTarget</p>
                            }
                            
                        </div>
                    }
                </div>
            }
        </MudPaper>
    }
    
    <MudPaper Class="d-flex flex-row flex-wrap justify-center align-center gap-6 pa-2" Elevation="0" Outlined="true">
        
        <MudButton Variant="Variant.Text" Color="Color.Primary">Algorithm</MudButton>
        <MudButton @onclick="Visualize" Variant="Variant.Filled" Color="Color.Primary">Visualize</MudButton>
        <MudButton @onclick="Clear" Variant="Variant.Text" Color="Color.Primary">Clear</MudButton>

        <MudPaper MaxWidth="150px" Elevation="0">
            <MudSelect Margin="Margin.Dense" @bind-Value="_stepsPerRender" Label="Speed" Variant="Variant.Outlined">
                <MudSelectItem Value="0">Instant</MudSelectItem>
                <MudSelectItem Value="21">Fast</MudSelectItem>
                <MudSelectItem Value="11">Average</MudSelectItem>
                <MudSelectItem Value="1">Slow</MudSelectItem>
            </MudSelect>
        </MudPaper>
        
        
        <MudToggleIconButton @bind-Toggled="@_clearWalls"
                             Variant="Variant.Filled" Size="Size.Medium" ToggledSize="Size.Medium" Edge="Edge.False"
                             Icon="@Icons.Material.Filled.AppRegistration" Color="@Color.Primary" Title="Place Walls"
                             ToggledIcon="@Icons.Material.Filled.CleaningServices" ToggledColor="@Color.Error" ToggledTitle="Clear Walls"/>
        
         <MudToggleIconButton @bind-Toggled="@_debugMode"
                                     Variant="Variant.Text" Size="Size.Medium" ToggledSize="Size.Medium" Edge="Edge.False"
                                     Icon="@Icons.Material.Outlined.Info"  Title="Turn off Debug Mode"
                                     ToggledIcon="@Icons.Material.Filled.Info" ToggledTitle="Turn on Debug Mode"/>
    </MudPaper>
</div>


@code
{
        private const int MarginXPixels = 20;
        private const int MarginYPixels = 250;
        private const int NodeSize = 30;

    private static readonly IEnumerable<(NodeState states, string name)> NodeStates = new[]
    {
        (NodeState.Wall, "Wall Node"),
        (NodeState.Empty, "Empty Node"),
        (NodeState.Start, "Start Node"),
        (NodeState.End, "End Node"),
        (NodeState.Open, "Open Node"),
        (NodeState.Closed, "Close Node"),
        (NodeState.Path, "Path Node")
    };
    
    private Grid? _grid;
    private IPathfinder? _pathfinder;

    private Node? _start;
    private Node? _end;

    private Node? _dragNode;
    private bool _mouseDown;
    private bool _clearWalls;
    private bool _debugMode;

    private int _stepsCount;
    private int _stepsPerRender = 21;
    
    private bool _isRunning;

    protected override async Task OnInitializedAsync()
    {
        var dimensions = await JsRuntime.InvokeAsync<WindowDimensions>("getDimensions");
        var rows = (dimensions.Height - MarginYPixels) / NodeSize;
        var columns = (dimensions.Width - MarginXPixels) / NodeSize;

        _grid = Grid.CreateGrid(rows, columns);

        var row = rows / 2;

        var startNodeCol = columns / 3;
        _start = _grid[row][startNodeCol];      // set start node
        _start.State = NodeState.Start; 

        var endNodeCol = columns / 3 * 2;
        _end = _grid[row][endNodeCol];          // set end node
        _end.State = NodeState.End;
    }

    private static string NodeStyleFunc(NodeState state)
    {
        var color = state switch {
            NodeState.Empty => "#fff",
            NodeState.Wall => "#023047",
            NodeState.Path => "#219ebc",
            NodeState.Start => "#90be6d",
            NodeState.End => "#e63946",
            NodeState.Open => "#ffc300",
            NodeState.Closed => "#ff9b54",
            _ => throw new ArgumentOutOfRangeException(nameof(state))};

        return $"background: {color};" + (state is NodeState.Wall ? $"outline: 1px solid {color};" : string.Empty);
    }

    private void ToggleNode(Node node)
    {
        if (node.State is NodeState.Start or NodeState.End) return;
        
        node.State = _clearWalls ? NodeState.Empty : NodeState.Wall;
    }

    private void OnMouseDown(Node node)
    {
        _mouseDown = true;
        
        if (_isRunning) return;

        if (node.State is NodeState.Start or NodeState.End)
        {
            _dragNode = node;
        }
        
        ToggleNode(node);
    }

    private void OnMouseEnter(Node node)
    {
        if (!_mouseDown || _isRunning) return;

        if (_dragNode is not null)
        {
            var (row, col) = _dragNode.Position;
            (_grid![row][col].State, node.State) = (node.State, _grid![row][col].State);
            _dragNode = node;
            return;
        }
        
        ToggleNode(node);
    }

    private void OnMouseUp()
    {
        if (_dragNode is not null)
        {
            switch (_dragNode.State)
            {
                case NodeState.Start:
                    _start = _dragNode;
                    break;
                case NodeState.End:
                    _end = _dragNode;
                    break;
            }
            _dragNode = null;
        }
        
        _mouseDown = false;
    }

    private async Task Visualize()
    {
        if (_start is null || _end is null || _grid is null) return;

        if (_mouseDown)
        {
            
            return;
        }
        
        _isRunning = true;
        _pathfinder = new AStar(_grid)
        {
            IncludePathIntoSteps = false
        };

        var path = _pathfinder.FindPath(_start, _end);

        var totalSteps = _pathfinder.Steps.Count;
        while (_pathfinder.Steps.Any())
        {
            var node = _pathfinder.Steps.Dequeue();

            _grid?.UpdateNode(node.Position, node);

            await DelayIfNeeded(totalSteps);
        }
        
        while (path.Any())
        {
            var node = path.Pop();
            node.State = NodeState.Path;
            _grid?.UpdateNode(node.Position, node);

            await InvokeAsync(StateHasChanged);
            await Task.Delay(50);
        }

        _isRunning = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task DelayIfNeeded(int totalSteps)
    {
        if (_stepsPerRender == 0) return;    
            
        if (_stepsCount++ < _stepsPerRender) return;
        
        if (_stepsCount >= _stepsPerRender) _stepsCount = 0;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(totalSteps / _stepsPerRender);
    }

    private void Clear()
    {
        if (_isRunning) return;
        
        _grid?.Clear();
    }
}